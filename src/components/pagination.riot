<pagination>
  <template if={enabled()}>
    <a
      onclick={event => pageTo(1, event)}
      href="#"
      class="first text-decoration-none dfk-sans-serif {show(!isFirst())}"
    >
      <dfk-icon type="arrow-left" />
      <dfk-icon type="arrow-left" />
      <span class="text">erste Seite</span>
    </a>
    <a
      onclick={event => pageTo(this.props.page - 1, event)}
      href="#"
      class="previous text-decoration-none dfk-sans-serif {show(!isFirst())}"
    >
      <dfk-icon type="arrow-left" />
      <span class="text">vorherige Seite</span>
    </a>
    <div class="pt-1 indicator">{this.props.page}/{totalPages()}</div>
    <a
      onclick={event => pageTo(this.props.page + 1, event)}
      href="#"
      class="next text-decoration-none dfk-sans-serif {show(!isLast())}"
    >
      <span class="text">n√§chste Seite</span>
      <dfk-icon type="arrow-right" />
    </a>
    <a
      onclick={event => pageTo(totalPages(), event)}
      href="#"
      class="last text-decoration-none dfk-sans-serif {show(!isLast())}"
    >
      <span class="text">letzte Seite</span>
      <dfk-icon type="arrow-right" />
      <dfk-icon type="arrow-right" />
    </a>
  </template>

  <script>
    import Icon from './icon.riot'

    export default class {
      static components = {
        'dfk-icon': Icon
      }

      constructor() {
        this.previous = this.previous.bind(this)
        this.next = this.next.bind(this)
      }

      onBeforeMount() {
        this.on('to-previous-page', this.previous)
        this.on('to-next-page', this.next)
      }

      previous() {
        if (this.props.page > 1) {
          this.pageTo(this.props.page - 1)
        }
      }

      next() {
        if (this.props.page < this.totalPages()) {
          this.pageTo(this.props.page + 1)
        }
      }

      enabled() {
        const total = this.props.total || 0
        return total > this.props.perPage
      }

      pageTo(newPage, event) {
        if (event) {
          event.preventDefault()
        }

        if (this.props.pageTo) {
          this.props.pageTo({page: newPage})
        }
      }

      isFirst() {
        return this.props.page == 1
      }

      isLast() {
        return this.props.page == this.totalPages()
      }

      totalPages() {
        return Math.ceil(this.props.total / this.props.perPage)
      }

      show(value) {
        return value ? '' : 'd-none'
      }
    }
  </script>
</pagination>