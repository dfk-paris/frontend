<dfk-facet class={classes()}>
  <div class="header d-flex justify-content-between mb-4 dfk-sans-serif">
    <div>{props.name}</div>
    <div
      if={total() > 5}
      class="text-end"
    >
      <a onclick={event => toggleShowAll(event)}>{t('show_all')}</a>
    </div>
  </div>

  <dfk-popup open={this.state.popup} class="facet">
    <div style="margin: 40px">
      <div class="tag-line">{props.tag_line}</div>
      <div class="header d-flex justify-content-between">
        <h2 class="mt-1">{props.name}</h2>
        <a onclick={event => toggleShowAll(event)}>
          <dfk-icon type="cross" />
        </a>
      </div>
      <div class="body">
        <div class="row">
          <div class="col-3">
            <dfk-input update-handler={this.setFilter} />
          </div>
        </div>

        <p if={props.text}>{props.text}</p>

        <dfk-pagination
          class="mt-6 mb-5"
          page={state.page}
          per-page={10}
          total={count()}
          page-to={page => this.update({page: page})}
        />

        <div class="d-flex flex-column align-items-start">
          <a
            each={bucket in bucketsPage()}
            class="d-block rounded type-{props.type} mb-2 p-2 text-decoration-none"
            onclick={event => addFilter(event, bucket.key)}
          >
            <div class="d-flex">
              <div>+</div>
              <div class="ml-1">{bucket.key} ({bucket.doc_count})</div>
            </div>
          </a>
        </div>
      </div>
    </div>
  </dfk-popup>

  <div class="d-flex flex-column align-items-start">
    <a
      each={bucket in bigBuckets()}
      class="d-block rounded type-{props.type} mb-2 p-2 text-decoration-none dfk-sans-serif"
      onclick={event => addFilter(event, bucket.key)}
    >
      <div class="d-flex">
        <div>+</div>
        <div class="ml-1">{labelFor(bucket.key)} ({bucket.doc_count})</div>
      </div>
    </a>
  </div>

  <script>
    import {i18n, util} from '@wendig/lib'

    import Icon from './icon.riot'
    import Input from './input.riot'
    import Pagination from './pagination.riot'
    import Popup from './popup.riot'

    export default class {
      static components = {
        'dfk-icon': Icon,
        'dfk-input': Input,
        'dfk-pagination': Pagination,
        'dfk-popup': Popup
      }

      constructor() {
        this.t = i18n.translate

        this.setFilter = this.setFilter.bind(this)
      }

      classes() {
        return [
          this.props.class,
          this.total() ? '' : 'd-none'
        ].join(' ')
      }

      onBeforeMount() {
        this.state = {
          expanded: false,
          popup: false,
          page: 1
        }
      }

      addFilter(event, newFilter) {
        event.preventDefault()

        if (this.props.addFilter) {
          let c = this.props.value
          if (c) {
            c = c.split('|')
          } else {
            c = []
          }
          c.push(newFilter)

          this.props.addFilter({
            [this.props.type]: c.join('|')
          })
        }
      }

      total() {
        return this.buckets().length
      }

      count() {
        return this.filteredBuckets().length
      }

      buckets() {
        return this.props.aggregation.buckets
      }

      filteredBuckets() {
        let buckets = this.buckets()
        if (this.state.filter) {
          const r = new RegExp(util.fold(this.state.filter))
          buckets = buckets.filter(e => {
            const folded = util.fold(e.key)
            return folded.match(r)
          })
        }
        return buckets
      }

      bigBuckets() {
        const limit = this.state.expanded ? 10 : 5
        return this.buckets().slice(0, limit)
      }

      bucketsPage() {
        const page = this.state.page - 1
        return this.filteredBuckets().slice(page * 10, page * 10 + 10)
      }

      toggleShowAll(event) {
        event.preventDefault()

        // ensure closing opened popups
        if (this.state.popup) {
          this.update({popup: false})
          return
        }

        // ensure collapsing expanded
        if (this.state.expanded) {
          this.update({expanded: false})
          return
        }

        if (this.total() > 10) {
          this.update({popup: !this.state.popup})
        } else {
          this.update({expanded: !this.state.open})
        }
      }

      labelFor(key) {
        if (this.props.translateKeys) {
          return this.t(key)
        } else {
          return key
        }
      }

      setFilter(event, value) {
        this.update({
          filter: value,
          page: 1
        })
      }
    }
  </script>
</dfk-facet>
